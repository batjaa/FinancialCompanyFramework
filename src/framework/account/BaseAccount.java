package framework.account;

import java.util.Observable;
import java.util.Vector;

import framework.customer.ICustomer;
//
//
// Generated by StarUML(tm) Java Add-In
//
// @ Project : Financial Application Framework
// @ File Name : BaseAccount.java
// @ Date : 4/21/2014
// @ Author : Batjargal Batbold, Jose Ardaiz, Ripon Datta
//
//

public class BaseAccount extends Observable implements IAccount {
	private ICustomer			customer;
	private String				accountNr;
	protected IAccountState		accountState;
	protected Vector<IEntry>	entries;
	protected double			balance;

	public BaseAccount(ICustomer customer) {
		this.customer = customer;

		this.accountNr = generateAccountNumber();
		this.accountState = AccountStateActive.getInstance();
		this.entries = new Vector<IEntry>();
	}

	// Delegate to state method
	public boolean deposit(Entry entry) {
		// Possible to put different logics
		// For example: A checking account can only receive up to 5000$ in 1 transaction
		if (entry.getAmount() > 0) {
			if (accountState.deposit(this, entry)) {
				broadcastChange();
				return true;
			} else return false;
		} else return false;
	}

	// Delegate to state method
	/**
	 * Will convert any given entry amount into negative (-) amount
	 */
	public boolean withdraw(Entry entry) {
		double amount = Math.abs(entry.getAmount());
		entry.setAmount(-amount);
		if (accountState.withdraw(this, entry)) {
			broadcastChange();
			return true;
		} else return false;
	}

	protected void setState(IAccountState state) {
		this.accountState = state;
	}

	public void addEntry(IEntry entry) {
		entries.add(entry);
		balance += entry.getAmount();
	}

	public double getBalance() {
		return balance;
	}

	// Generates random account number
	private String generateAccountNumber() {
		return "MB" + System.currentTimeMillis();
	}

	@Override
	public String toString() {
		return accountNr + " " + getBalance() + "$";
	}

	@Override
	public void setCustomer(ICustomer customer) {
		this.customer = customer;
	}

	@Override
	public ICustomer getCustomer() {
		return customer;
	}

	@Override
	public void closeAccount() {
		accountState = AccountStateClosed.getInstance();
	}

	@Override
	public void activateAccount() {
		accountState = AccountStateActive.getInstance();
	}

	@Override
	public String getName() {
		return accountNr;
	}

	@Override
	public Vector<IEntry> getEntries() {
		return entries;
	}

	@Override
	public void broadcastChange() {
		setChanged();
		notifyObservers();
	}

}
