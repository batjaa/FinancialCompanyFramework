package framework;

import java.util.Date;

import framework.account.Entry;
import framework.account.IAccount;
import framework.command.AddAccount;
import framework.command.CommandManager;
import framework.command.Deposit;
import framework.command.Withdraw;
import framework.customer.CustomerManager;
import framework.customer.ICustomer;
import framework.factory.AccountFactory;
import framework.factory.CustomerFactory;
import framework.report.BaseAccountBill;
import framework.report.BaseCustomerBill;
//
//
// Generated by StarUML(tm) Java Add-In
//
// @ Project : Financial Application Framework
// @ File Name : BankingApplication.java
// @ Date : 4/21/2014
// @ Author : Batjargal Batbold, Jose Ardaiz, Ripon Datta
//
//

public class FinancialCompanyApplication {

	private CustomerManager	customerManager;
	private CommandManager	commandManager;

	public FinancialCompanyApplication() {
		customerManager = new CustomerManager(this);
		commandManager = new CommandManager(this);
	}

	@SuppressWarnings("deprecation")
	public static void main(String[] args) {
		FinancialCompanyApplication myBank = new FinancialCompanyApplication();
		System.out.println("Start");

		// Test

		// ////////////////////////////////////////////////////////////////////////////////////////////
		// Use case 1: Create a personal checking account
		// Create a person usinc factory
		CustomerFactory uc1f =
			new CustomerFactory("Batjargal Batbold", "1000N 4th Street", "Fairfield", "Iowa",
					"52557", "batjaa@test.com");
		// Get the new Person object
		ICustomer uc1customer = uc1f.make();
		// Create a checking account using factory
		AccountFactory uc1af = new AccountFactory(uc1customer);
		// Get the new Account object, type Checking
		IAccount uc1account = uc1af.make();
		// Initialize command
		AddAccount cmdAddAccount1 = new AddAccount(uc1customer, uc1account);
		// Send command
		myBank.getCommandManager().sendCommand(cmdAddAccount1);

		// Use case 3
		// Deposit money to account
		Deposit uc3deposit = new Deposit(uc1account, new Entry(100, new Date(), "Test deposit"));
		myBank.getCommandManager().sendCommand(uc3deposit);

		// Expected output
		// Customers:
		// Batjargal Batbold[batjaa@test.com] has 1 account(s)
		// MB1398354455834 100.0$

		// Create bill
		BaseCustomerBill uc6billFunctor = new BaseCustomerBill(new BaseAccountBill());
		myBank.getCustomerManager().forEach(uc6billFunctor);
		System.out.println(uc6billFunctor.getReport());

		// Use case 4
		// Withdraw money from account
		Withdraw uc2withdraw =
			new Withdraw(uc1account, new Entry(37, new Date(), "Testing withdraw"));
		myBank.getCommandManager().sendCommand(uc2withdraw);

		// Create new report
		uc6billFunctor = new BaseCustomerBill(new BaseAccountBill());
		myBank.getCustomerManager().forEach(uc6billFunctor);
		System.out.println(uc6billFunctor.getReport());

		/*
		 * // Create a personal saving account // Create a saving account with factorys
		 * SavingFactory accFac2 = new SavingFactory(); IAccount account2 =
		 * accFac2.getNewInstance(); // Initialize command AddAccount cmdAddAccount2 = new
		 * AddAccount(myBank.getCustomerManager(), batjargal, account2); // Send to command manager
		 * myBank.getCommandManager().sendCommand(cmdAddAccount2); // Create a company personal
		 * saving account // Create a comanpy with factory CompanyFactory cf = new
		 * CompanyFactory("MUM", "1000N 4th Street", "Fairfield", "Iowa", "52557", "info@mum.edu",
		 * 57); Company mum = cf.getNewInstance(); // Create a saving accou with factory
		 * SavingFactory accFac3 = new SavingFactory(); IAccount account3 =
		 * accFac3.getNewInstance(); // Initialize command AddAccount cmdAddAccount3 = new
		 * AddAccount(myBank.getCustomerManager(), mum, account3); // Send to command manager
		 * myBank.getCommandManager().sendCommand(cmdAddAccount3); try { Thread.sleep(150); } catch
		 * (InterruptedException e) { e.printStackTrace(); } // Deposit to account // Create entry
		 * Entry entry1 = new Entry(100, new Date(), "Deposit"); // Initialize command // This
		 * command will run for 0-20 seconds until finish in a different thread Deposit cmdDeposit1
		 * = new Deposit(account1, entry1); // Send command
		 * myBank.getCommandManager().sendCommand(cmdDeposit1); // Check account transition // Might
		 * not give error somtime because the command itself is only in the // command manager
		 * thread account2.closeAccount(); // Create entry Entry entry2 = new Entry(100, new Date(),
		 * "Deposit"); // Initialize command // This command will run for 0-20 seconds until finish
		 * in a different thread Deposit cmdDeposit2 = new Deposit(account2, entry2); // Send
		 * command myBank.getCommandManager().sendCommand(cmdDeposit2); // Check account withdraw //
		 * Create entry Entry entry3 = new Entry(100, new Date(), "Withdraw"); // Create command //
		 * This command runs for 0-4 seconds Withdraw cmdWithdraw3 = new Withdraw(account3, entry3);
		 * // Send command // Should give error
		 * myBank.getCommandManager().sendCommand(cmdWithdraw3); try { Thread.sleep(150); } catch
		 * (InterruptedException e) { e.printStackTrace(); } // Add interest // Create command
		 * AddInterest cmdAddInterest = new AddInterest(account1);
		 * myBank.getCommandManager().sendCommand(cmdAddInterest); // CCFactory supposed to be
		 * abstract // For testing purpose changed it to concrete CreditCardFactory accFac4 = new
		 * CreditCardFactory(new BaseCreditCardType("My")); IAccount account4 =
		 * accFac4.getNewInstance(); // Create command and submit AddAccount cmdAddAccount4 = new
		 * AddAccount(myBank.getCustomerManager(), batjargal, account4);
		 * myBank.getCommandManager().sendCommand(cmdAddAccount4); try { Thread.sleep(100); } catch
		 * (InterruptedException e) { e.printStackTrace(); } // Deposit to CC Entry entry5 = new
		 * Entry(50, new Date(), "CC deposit"); Deposit cmdDeposit5 = new Deposit(account4, entry5);
		 * myBank.getCommandManager().sendCommand(cmdDeposit5); try { Thread.sleep(150); } catch
		 * (InterruptedException e) { e.printStackTrace(); } // Charge CC Entry entry6 = new
		 * Entry(30, new Date(), "CC Purchase Paypal"); Charge cmdCharge6 = new Charge(account4,
		 * entry6); myBank.getCommandManager().sendCommand(cmdCharge6); try { Thread.sleep(1000); }
		 * catch (InterruptedException e) { e.printStackTrace(); }
		 * System.out.println(myBank.getCustomerManager());
		 * System.out.println(myBank.getCommandManager()); // Create dumb billing report
		 * System.out.println("Report main:"); System.out.println("-----------------------------");
		 * MonthlyBillFunctor mbf = new MonthlyBillFunctor(new MonthlyAccountBillFunctor());
		 * myBank.getCustomerManager().forEach(mbf); System.out.println(mbf.getReport()); // Create
		 * credit card billing report System.out.println("Credit card billing:");
		 * System.out.println("-----------------------------"); Search for something // Create a
		 * search functor System.out.println("SearchBy function"); SearchByFunctor<ICustomer> sf =
		 * new SearchByFunctor<ICustomer>(new NameGetter(), "MUM");
		 * System.out.println(myBank.getCustomerManager().searchBy(sf));
		 * System.out.println("Found matches: " + sf.foundMatches());
		 * System.out.println("SearchByAccount function"); SearchByFunctor<IAccount> sfa = new
		 * SearchByFunctor<IAccount>(new AccountNameGetter(), mum.getAccounts().get(0).getName());
		 * System.out.println(myBank.getCustomerManager().searchByAccount(sfa));
		 * System.out.println("Found matches: " + sfa.foundMatches()); // Don't forget to stop the
		 * command manager thread
		 */

		// End
		System.out.println(myBank.getCustomerManager());
		System.out.println("");
		System.out.println("End");
		myBank.commandManager.stop();
	}

	public CustomerManager getCustomerManager() {
		return customerManager;
	}

	public CommandManager getCommandManager() {
		return commandManager;
	}

}
